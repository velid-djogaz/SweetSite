{"version":3,"sources":["cartSummary.js"],"names":["updateCartSummary","cart","getCart","totalItems","totalPrice","item","quantity","price","cartQuantityElement","document","getElementById","cartTotalElement","textContent","toFixed","addToCart","productName","existingItem","find","name","push","saveCart","removeFromCart","index","findIndex","splice","window","addEventListener"],"mappings":";;AAAA;AACA,SAASA,iBAAT,GAA6B;AACzB,MAAMC,IAAI,GAAGC,OAAO,EAApB,CADyB,CACD;AAExB;;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,UAAU,GAAG,CAAjB;AALyB;AAAA;AAAA;;AAAA;AAOzB,yBAAmBH,IAAnB,8HAAyB;AAAA,UAAdI,IAAc;AACrBF,MAAAA,UAAU,IAAIE,IAAI,CAACC,QAAnB,CADqB,CACQ;;AAC7BF,MAAAA,UAAU,IAAIC,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACE,KAAnC;AACH,KAVwB,CAYzB;;AAZyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAazB,MAAMC,mBAAmB,GAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAA5B;AACA,MAAMC,gBAAgB,GAAGF,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAzB;AAEAF,EAAAA,mBAAmB,CAACI,WAApB,GAAkCT,UAAlC;AACAQ,EAAAA,gBAAgB,CAACC,WAAjB,GAA+BR,UAAU,CAACS,OAAX,CAAmB,CAAnB,CAA/B,CAjByB,CAiB6B;AACzD,C,CAED;AACA;AACA;AAEA;;;AACA,SAASC,SAAT,CAAmBC,WAAnB,EAAgCR,KAAhC,EAAuC;AACnC,MAAMN,IAAI,GAAGC,OAAO,EAApB,CADmC,CACX;;AACxB,MAAMc,YAAY,GAAGf,IAAI,CAACgB,IAAL,CAAU,UAACZ,IAAD;AAAA,WAAUA,IAAI,CAACa,IAAL,KAAcH,WAAxB;AAAA,GAAV,CAArB;;AAEA,MAAIC,YAAJ,EAAkB;AACd;AACAA,IAAAA,YAAY,CAACV,QAAb;AACH,GAHD,MAGO;AACH;AACAL,IAAAA,IAAI,CAACkB,IAAL,CAAU;AACND,MAAAA,IAAI,EAAEH,WADA;AAENR,MAAAA,KAAK,EAAEA,KAFD;AAGND,MAAAA,QAAQ,EAAE;AAHJ,KAAV;AAKH,GAdkC,CAgBnC;;;AACAc,EAAAA,QAAQ,CAACnB,IAAD,CAAR,CAjBmC,CAmBnC;;AACAD,EAAAA,iBAAiB;AACpB,C,CAED;;;AACA,SAASqB,cAAT,CAAwBN,WAAxB,EAAqC;AACjC,MAAMd,IAAI,GAAGC,OAAO,EAApB,CADiC,CACT;AAExB;;AACA,MAAMoB,KAAK,GAAGrB,IAAI,CAACsB,SAAL,CAAe,UAAClB,IAAD;AAAA,WAAUA,IAAI,CAACa,IAAL,KAAcH,WAAxB;AAAA,GAAf,CAAd;;AAEA,MAAIO,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd;AACArB,IAAAA,IAAI,CAACuB,MAAL,CAAYF,KAAZ,EAAmB,CAAnB,EAFc,CAId;;AACAF,IAAAA,QAAQ,CAACnB,IAAD,CAAR,CALc,CAOd;;AACAD,IAAAA,iBAAiB;AACpB;AACJ,C,CAED;;;AACAyB,MAAM,CAACC,gBAAP,CAAwB,kBAAxB,EAA4C,YAAM;AAC9C1B,EAAAA,iBAAiB;AACpB,CAFD","sourcesContent":["// Function to update the cart summary\r\nfunction updateCartSummary() {\r\n    const cart = getCart(); // Get the cart items (you should have a function to get cart items)\r\n\r\n    // Calculate total items and total price\r\n    let totalItems = 0;\r\n    let totalPrice = 0;\r\n\r\n    for (const item of cart) {\r\n        totalItems += item.quantity; // Assuming each item in the cart has a 'quantity' property\r\n        totalPrice += item.quantity * item.price;\r\n    }\r\n\r\n    // Update the HTML elements in the cart summary\r\n    const cartQuantityElement = document.getElementById(\"cart-quantity\");\r\n    const cartTotalElement = document.getElementById(\"cart-total\");\r\n\r\n    cartQuantityElement.textContent = totalItems;\r\n    cartTotalElement.textContent = totalPrice.toFixed(2); // Format total price with two decimal places\r\n}\r\n\r\n// Call the updateCartSummary function whenever items are added or removed from the cart\r\n// You should have functions for adding/removing items from the cart\r\n// Call updateCartSummary() after those operations\r\n\r\n// Example of adding an item to the cart:\r\nfunction addToCart(productName, price) {\r\n    const cart = getCart(); // Get the cart items\r\n    const existingItem = cart.find((item) => item.name === productName);\r\n\r\n    if (existingItem) {\r\n        // If the product already exists in the cart, increment its quantity\r\n        existingItem.quantity++;\r\n    } else {\r\n        // If it's a new product, add it to the cart\r\n        cart.push({\r\n            name: productName,\r\n            price: price,\r\n            quantity: 1,\r\n        });\r\n    }\r\n\r\n    // Save the updated cart to local storage\r\n    saveCart(cart);\r\n\r\n    // Update the cart summary\r\n    updateCartSummary();\r\n}\r\n\r\n// Example of removing an item from the cart:\r\nfunction removeFromCart(productName) {\r\n    const cart = getCart(); // Get the cart items\r\n\r\n    // Find the index of the item to remove\r\n    const index = cart.findIndex((item) => item.name === productName);\r\n\r\n    if (index !== -1) {\r\n        // If the item exists in the cart, remove it\r\n        cart.splice(index, 1);\r\n\r\n        // Save the updated cart to local storage\r\n        saveCart(cart);\r\n\r\n        // Update the cart summary\r\n        updateCartSummary();\r\n    }\r\n}\r\n\r\n// Call updateCartSummary() when the page loads initially to show the correct summary\r\nwindow.addEventListener(\"DOMContentLoaded\", () => {\r\n    updateCartSummary();\r\n});"],"file":"cartSummary.dev.js"}