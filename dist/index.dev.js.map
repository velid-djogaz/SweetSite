{"version":3,"sources":["index.js"],"names":["app","use","express","json","urlencoded","extended","port","process","env","PORT","environment","ENVIRONMENT","client_id","CLIENT_ID","client_secret","CLIENT_SECRET","endpoint_url","post","req","res","get_access_token","then","access_token","order_data_json","body","intent","toUpperCase","data","JSON","stringify","method","headers","send","err","console","log","status","order_id","get","sendFile","cwd","auth","Buffer","from","toString","listen"],"mappings":";;AAAA;;AACA;;AACA;;;;AACA,IAAMA,GAAG,GAAG,0BAAZ;AACAA,GAAG,CAACC,GAAJ,CAAQC,oBAAQC,IAAR,EAAR;AACAH,GAAG,CAACC,GAAJ,CAAQC,oBAAQE,UAAR,CAAmB;AACvBC,EAAAA,QAAQ,EAAE;AADa,CAAnB,CAAR;AAGA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,IAAMC,WAAW,GAAGH,OAAO,CAACC,GAAR,CAAYG,WAAZ,IAA2B,SAA/C;AACA,IAAMC,SAAS,GAAGL,OAAO,CAACC,GAAR,CAAYK,SAA9B;AACA,IAAMC,aAAa,GAAGP,OAAO,CAACC,GAAR,CAAYO,aAAlC;AACA,IAAMC,YAAY,GAAGN,WAAW,KAAK,SAAhB,GAA4B,kCAA5B,GAAiE,0BAAtF;AAEA;;;;;;;;;;;;;AAYAV,GAAG,CAACiB,IAAJ,CAAS,eAAT,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACpCC,EAAAA,gBAAgB,GACXC,IADL,CACU,UAAAC,YAAY,EAAI;AAClB,QAAIC,eAAe,GAAG;AAClB,gBAAUL,GAAG,CAACM,IAAJ,CAASC,MAAT,CAAgBC,WAAhB,EADQ;AAElB,wBAAkB,CAAC;AACf,kBAAU;AACN,2BAAiB,KADX;AAEN,mBAAS;AAFH;AADK,OAAD;AAFA,KAAtB;AASA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeN,eAAf,CAAb;AAEA,+BAAMP,YAAY,GAAG,qBAArB,EAA4C;AAAE;AACtCc,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,0CAA2BT,YAA3B;AAFK,OAF2B;AAMpCE,MAAAA,IAAI,EAAEG;AAN8B,KAA5C,EAQKN,IARL,CAQU,UAAAF,GAAG;AAAA,aAAIA,GAAG,CAAChB,IAAJ,EAAJ;AAAA,KARb,EASKkB,IATL,CASU,UAAAlB,IAAI,EAAI;AACVgB,MAAAA,GAAG,CAACa,IAAJ,CAAS7B,IAAT;AACH,KAXL,EAZkB,CAuBX;AACV,GAzBL,WA0BW,UAAA8B,GAAG,EAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAd,IAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqBC,GAArB;AACH,GA7BL;AA8BH,CA/BD;AAiCA;;;;;;;;;;;;;;AAaAjC,GAAG,CAACiB,IAAJ,CAAS,iBAAT,EAA4B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtCC,EAAAA,gBAAgB,GACXC,IADL,CACU,UAAAC,YAAY,EAAI;AAClB,+BAAMN,YAAY,GAAG,sBAAf,GAAwCE,GAAG,CAACM,IAAJ,CAASa,QAAjD,GAA4D,GAA5D,GAAkEnB,GAAG,CAACM,IAAJ,CAASC,MAAjF,EAAyF;AACjFK,MAAAA,MAAM,EAAE,MADyE;AAEjFC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,0CAA2BT,YAA3B;AAFK;AAFwE,KAAzF,EAOKD,IAPL,CAOU,UAAAF,GAAG;AAAA,aAAIA,GAAG,CAAChB,IAAJ,EAAJ;AAAA,KAPb,EAQKkB,IARL,CAQU,UAAAlB,IAAI,EAAI;AACV+B,MAAAA,OAAO,CAACC,GAAR,CAAYhC,IAAZ;AACAgB,MAAAA,GAAG,CAACa,IAAJ,CAAS7B,IAAT;AACH,KAXL,EADkB,CAYX;AACV,GAdL,WAeW,UAAA8B,GAAG,EAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAd,IAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqBC,GAArB;AACH,GAlBL;AAmBH,CApBD,E,CAsBA;AAEA;;AACAjC,GAAG,CAACsC,GAAJ,CAAQ,GAAR,EAAa,UAACpB,GAAD,EAAMC,GAAN,EAAc;AACvBA,EAAAA,GAAG,CAACoB,QAAJ,CAAahC,OAAO,CAACiC,GAAR,KAAgB,aAA7B;AACH,CAFD,E,CAGA;;AACAxC,GAAG,CAACsC,GAAJ,CAAQ,YAAR,EAAsB,UAACpB,GAAD,EAAMC,GAAN,EAAc;AAChCA,EAAAA,GAAG,CAACoB,QAAJ,CAAahC,OAAO,CAACiC,GAAR,KAAgB,YAA7B;AACH,CAFD,E,CAGA;;AACAxC,GAAG,CAACsC,GAAJ,CAAQ,YAAR,EAAsB,UAACpB,GAAD,EAAMC,GAAN,EAAc;AAChCA,EAAAA,GAAG,CAACoB,QAAJ,CAAahC,OAAO,CAACiC,GAAR,KAAgB,YAA7B;AACH,CAFD,E,CAIA;AACA;AACA;;AACA,SAASpB,gBAAT,GAA4B;AACxB,MAAMqB,IAAI,aAAM7B,SAAN,cAAmBE,aAAnB,CAAV;AACA,MAAMa,IAAI,GAAG,+BAAb;AACA,SAAO,2BAAMX,YAAY,GAAG,kBAArB,EAAyC;AACxCc,IAAAA,MAAM,EAAE,MADgC;AAExCC,IAAAA,OAAO,EAAE;AACL,sBAAgB,mCADX;AAEL,uCAA0BW,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,QAAlB,CAA2B,QAA3B,CAA1B;AAFK,KAF+B;AAMxCpB,IAAAA,IAAI,EAAEG;AANkC,GAAzC,EAQFN,IARE,CAQG,UAAAF,GAAG;AAAA,WAAIA,GAAG,CAAChB,IAAJ,EAAJ;AAAA,GARN,EASFkB,IATE,CASG,UAAAlB,IAAI,EAAI;AACV,WAAOA,IAAI,CAACmB,YAAZ;AACH,GAXE,CAAP;AAYH;;AAEDtB,GAAG,CAAC6C,MAAJ,CAAWvC,IAAX,EAAiB,YAAM;AACnB4B,EAAAA,OAAO,CAACC,GAAR,gDAAoD7B,IAApD;AACH,CAFD","sourcesContent":["import express from 'express';\r\nimport fetch from 'node-fetch';\r\nimport 'dotenv/config';\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(express.urlencoded({\r\n    extended: true\r\n}));\r\nconst port = process.env.PORT || 5500;\r\nconst environment = process.env.ENVIRONMENT || 'sandbox';\r\nconst client_id = process.env.CLIENT_ID;\r\nconst client_secret = process.env.CLIENT_SECRET;\r\nconst endpoint_url = environment === 'sandbox' ? 'https://api-m.sandbox.paypal.com' : 'https://api-m.paypal.com';\r\n\r\n/**\r\n * Creates an order and returns it as a JSON response.\r\n * @function\r\n * @name createOrder\r\n * @memberof module:routes\r\n * @param {object} req - The HTTP request object.\r\n * @param {object} req.body - The request body containing the order information.\r\n * @param {string} req.body.intent - The intent of the order.\r\n * @param {object} res - The HTTP response object.\r\n * @returns {object} The created order as a JSON response.\r\n * @throws {Error} If there is an error creating the order.\r\n */\r\napp.post('/create_order', (req, res) => {\r\n    get_access_token()\r\n        .then(access_token => {\r\n            let order_data_json = {\r\n                'intent': req.body.intent.toUpperCase(),\r\n                'purchase_units': [{\r\n                    'amount': {\r\n                        'currency_code': 'USD',\r\n                        'value': '100.00'\r\n                    }\r\n                }]\r\n            };\r\n            const data = JSON.stringify(order_data_json)\r\n\r\n            fetch(endpoint_url + '/v2/checkout/orders', { //https://developer.paypal.com/docs/api/orders/v2/#orders_create\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${access_token}`\r\n                    },\r\n                    body: data\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    res.send(json);\r\n                }) //Send minimal data to client\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            res.status(500).send(err)\r\n        })\r\n});\r\n\r\n/**\r\n * Completes an order and returns it as a JSON response.\r\n * @function\r\n * @name completeOrder\r\n * @memberof module:routes\r\n * @param {object} req - The HTTP request object.\r\n * @param {object} req.body - The request body containing the order ID and intent.\r\n * @param {string} req.body.order_id - The ID of the order to complete.\r\n * @param {string} req.body.intent - The intent of the order.\r\n * @param {object} res - The HTTP response object.\r\n * @returns {object} The completed order as a JSON response.\r\n * @throws {Error} If there is an error completing the order.\r\n */\r\napp.post('/complete_order', (req, res) => {\r\n    get_access_token()\r\n        .then(access_token => {\r\n            fetch(endpoint_url + '/v2/checkout/orders/' + req.body.order_id + '/' + req.body.intent, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${access_token}`\r\n                    }\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    console.log(json);\r\n                    res.send(json);\r\n                }) //Send minimal data to client\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            res.status(500).send(err)\r\n        })\r\n});\r\n\r\n// Helper / Utility functions\r\n\r\n//Servers the index.html file\r\napp.get('/', (req, res) => {\r\n    res.sendFile(process.cwd() + '/index.html');\r\n});\r\n//Servers the style.css file\r\napp.get('/style.css', (req, res) => {\r\n    res.sendFile(process.cwd() + '/style.css');\r\n});\r\n//Servers the script.js file\r\napp.get('/script.js', (req, res) => {\r\n    res.sendFile(process.cwd() + '/script.js');\r\n});\r\n\r\n//PayPal Developer YouTube Video:\r\n//How to Retrieve an API Access Token (Node.js)\r\n//https://www.youtube.com/watch?v=HOkkbGSxmp4\r\nfunction get_access_token() {\r\n    const auth = `${client_id}:${client_secret}`\r\n    const data = 'grant_type=client_credentials'\r\n    return fetch(endpoint_url + '/v1/oauth2/token', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n                'Authorization': `Basic ${Buffer.from(auth).toString('base64')}`\r\n            },\r\n            body: data\r\n        })\r\n        .then(res => res.json())\r\n        .then(json => {\r\n            return json.access_token;\r\n        })\r\n}\r\n\r\napp.listen(port, () => {\r\n    console.log(`Server listening at http://localhost:${port}`)\r\n})"],"file":"index.dev.js"}