{"version":3,"sources":["index.js"],"names":["_express","_interopRequireDefault","require","_nodeFetch","app","use","express","json","urlencoded","extended","port","process","env","PORT","environment","ENVIRONMENT","CLIENT_ID","CLIENT_SECRET","get_access_token","auth","concat","client_id","client_secret","endpoint_url","method","headers","Content-Type","Authorization","Buffer","from","toString","data","then","res","access_token","post","req","order_data_json","intent","body","toUpperCase","purchase_units","amount","currency_code","JSON","stringify","send","err","console","status","order_id","log","get","sendFile","cwd","listen"],"mappings":"aAAA,IAAAA,SAAAC,uBAAAC,QAAA,YACAC,WAAAF,uBAAAC,QAAA,uFADAA,QAAA,iBAGA,IAAME,KAAM,EAAAJ,SAAA,WAFZI,IAAAC,IAAAC,SAAAA,QAAAC,QAIAH,IAAIC,IAAIC,SAAAA,QAAQE,WAAW,CAH3BC,UAAA,KAMA,IAAMC,KAAOC,QAAQC,IAAIC,MAAQ,KAC3BC,YAAcH,QAAQC,IAAIG,aAAe,UANzCX,UAAMO,QAAAC,IAAAI,UACRX,cAAIC,QAAQC,IAAhBU,cACIZ,aAAYG,YAARF,YAAmB,mCAAA,2BA2G3B,SAASY,mBACL,IAAUC,EAAA,GAAAC,OAAAC,UAAA,KAAAD,OAAAE,eAEV,OAAO,EAAAnB,WAAA,SAAAoB,aAAA,mBAAqB,CACZC,OADgC,OAEjCC,QAAE,CACLC,eAAgB,oCAChBC,cAAA,SAAAP,OAA0BQ,OAAOC,KAAKV,GAAMW,SAAS,YAEnDC,KAPD,kCASAC,KAAO,SAAAC,GAAC1B,OAAR0B,EAAA1B,SARNyB,KASG,SAAAzB,GACKA,OAAK2B,EAAAA,eAnGxB9B,IAAI+B,KAAK,gBAAiB,SAACC,EAAKH,GAC5Bf,mBACKc,KAAK,SAAAE,GACF,IAAIG,EAAkB,CAClBC,OAAUF,EAAIG,KAAKD,OAAOE,cAC1BC,eAAkB,CAAC,CACfC,OAAU,CAN9BC,cAAgCV,MAEvBD,MAAK,aAIgBD,EAAAa,KAAAC,UAAAR,IAEN,EAAAlC,WAAA,SAAAoB,aAAS,sBAAA,CAFHC,OAAA,OADIC,QAAA,CAFtBC,eAAA,mBASkBmB,cAAAA,UAAAA,OAAlBX,IAE8CK,KAAAR,IAE7BC,KAAA,SAAAC,GAAA,OAAAA,EAAA1B,SACLyB,KAAA,SAAAzB,GACA0B,EAAAa,KAAAvC,OAjBpB,MAqBkB,SAAAwC,GAAGC,QAAQzC,IAARwC,GACHd,EAAAgB,OAAA1C,KAAQuC,KAAAC,OAuB9B3C,IAAI+B,KAAK,kBAAmB,SAACC,EAAKH,GAC9Bf,mBACKc,KAAK,SAAAE,IACF,EAAA/B,WAAA,SAAMoB,aAAe,uBAAyBa,EAAIG,KAAKW,SAAW,IAAMd,EAAIG,KAAKD,OAAQ,CACjFd,OAAQ,OAJnBC,QAAmB,CAEnBO,eAAKE,mBACFP,cAAA,UAAAP,OAAqBc,MAGTF,KAAA,SAAAC,GAAgB,OAAAA,EAAA1B,SAChByB,KAAA,SAAAzB,GAFKyC,QAAAG,IAAA5C,GAKP0B,EAAAA,KAAG1B,OATrB,MAWwB4C,SAAAA,GACJL,QAAJK,IAAAJ,GACDd,EAAAgB,OAAA,KAAAH,KAAAC,OAWnB3C,IAAIgD,IAAI,IAAK,SAAChB,EAAKH,GAAfmB,EAAIC,SAAK1C,QAACyB,MAAa,iBAI3BhC,IAAIgD,IAAI,aAAc,SAAChB,EAAKH,GAAxBmB,EAAIC,SAAA1C,QAAc2C,MAAClB,gBAIvBhC,IAAIgD,IAAI,aAAc,SAAChB,EAAKH,GAAxBmB,EAAIC,SAAA1C,QAAc2C,MAAClB,gBAwBvBhC,IAAImD,OAAO7C,KAAM,WACbsC,QAAQG,IAARH,wCAAAA,OAAAtC","file":"index.min.js","sourcesContent":["import express from 'express';\r\nimport fetch from 'node-fetch';\r\nimport 'dotenv/config';\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(express.urlencoded({\r\n    extended: true\r\n}));\r\nconst port = process.env.PORT || 5500;\r\nconst environment = process.env.ENVIRONMENT || 'sandbox';\r\nconst client_id = process.env.CLIENT_ID;\r\nconst client_secret = process.env.CLIENT_SECRET;\r\nconst endpoint_url = environment === 'sandbox' ? 'https://api-m.sandbox.paypal.com' : 'https://api-m.paypal.com';\r\n\r\n/**\r\n * Creates an order and returns it as a JSON response.\r\n * @function\r\n * @name createOrder\r\n * @memberof module:routes\r\n * @param {object} req - The HTTP request object.\r\n * @param {object} req.body - The request body containing the order information.\r\n * @param {string} req.body.intent - The intent of the order.\r\n * @param {object} res - The HTTP response object.\r\n * @returns {object} The created order as a JSON response.\r\n * @throws {Error} If there is an error creating the order.\r\n */\r\napp.post('/create_order', (req, res) => {\r\n    get_access_token()\r\n        .then(access_token => {\r\n            let order_data_json = {\r\n                'intent': req.body.intent.toUpperCase(),\r\n                'purchase_units': [{\r\n                    'amount': {\r\n                        'currency_code': 'USD',\r\n                        'value': '100.00'\r\n                    }\r\n                }]\r\n            };\r\n            const data = JSON.stringify(order_data_json)\r\n\r\n            fetch(endpoint_url + '/v2/checkout/orders', { //https://developer.paypal.com/docs/api/orders/v2/#orders_create\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${access_token}`\r\n                    },\r\n                    body: data\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    res.send(json);\r\n                }) //Send minimal data to client\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            res.status(500).send(err)\r\n        })\r\n});\r\n\r\n/**\r\n * Completes an order and returns it as a JSON response.\r\n * @function\r\n * @name completeOrder\r\n * @memberof module:routes\r\n * @param {object} req - The HTTP request object.\r\n * @param {object} req.body - The request body containing the order ID and intent.\r\n * @param {string} req.body.order_id - The ID of the order to complete.\r\n * @param {string} req.body.intent - The intent of the order.\r\n * @param {object} res - The HTTP response object.\r\n * @returns {object} The completed order as a JSON response.\r\n * @throws {Error} If there is an error completing the order.\r\n */\r\napp.post('/complete_order', (req, res) => {\r\n    get_access_token()\r\n        .then(access_token => {\r\n            fetch(endpoint_url + '/v2/checkout/orders/' + req.body.order_id + '/' + req.body.intent, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${access_token}`\r\n                    }\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    console.log(json);\r\n                    res.send(json);\r\n                }) //Send minimal data to client\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            res.status(500).send(err)\r\n        })\r\n});\r\n\r\n// Helper / Utility functions\r\n\r\n//Servers the index.html file\r\napp.get('/', (req, res) => {\r\n    res.sendFile(process.cwd() + '/index.html');\r\n});\r\n//Servers the style.css file\r\napp.get('/style.css', (req, res) => {\r\n    res.sendFile(process.cwd() + '/style.css');\r\n});\r\n//Servers the script.js file\r\napp.get('/script.js', (req, res) => {\r\n    res.sendFile(process.cwd() + '/script.js');\r\n});\r\n\r\n//PayPal Developer YouTube Video:\r\n//How to Retrieve an API Access Token (Node.js)\r\n//https://www.youtube.com/watch?v=HOkkbGSxmp4\r\nfunction get_access_token() {\r\n    const auth = `${client_id}:${client_secret}`\r\n    const data = 'grant_type=client_credentials'\r\n    return fetch(endpoint_url + '/v1/oauth2/token', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n                'Authorization': `Basic ${Buffer.from(auth).toString('base64')}`\r\n            },\r\n            body: data\r\n        })\r\n        .then(res => res.json())\r\n        .then(json => {\r\n            return json.access_token;\r\n        })\r\n}\r\n\r\napp.listen(port, () => {\r\n    console.log(`Server listening at http://localhost:${port}`)\r\n})"]}