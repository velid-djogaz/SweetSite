{"version":3,"sources":["paypal.js"],"names":["process","env","CLIENT_ID","APP_SECRET","app","base","use","origin","generateAccessToken","auth","Buffer","from","toString","method","body","headers","Authorization","response","json","data","access_token","console","error","createOrder","accessToken","url","payload","intent","purchase_units","amount","currency_code","value","JSON","stringify","handleResponse","capturePayment","orderID","status","text","errorMessage","Error","post","req","res","params","listen","log"],"mappings":"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","sourcesContent":["import express from \"express\";\r\nimport fetch from \"node-fetch\";\r\nimport cors from \"cors\";\r\nimport \"dotenv/config\";\r\n\r\nconst { CLIENT_ID, APP_SECRET } = process.env;\r\nconst app = express();\r\nconst base = \"https://api-m.sandbox.paypal.com\";\r\napp.use(cors({origin: '*'}));\r\n\r\nconst generateAccessToken = async () => {\r\n  try {\r\n      const auth = Buffer.from(CLIENT_ID + \":\" + APP_SECRET).toString(\"base64\");\r\n      const response = await fetch(`${base}/v1/oauth2/token`, {\r\n        method: \"post\",\r\n        body: \"grant_type=client_credentials\",\r\n        headers: {\r\n          Authorization: `Basic ${auth}`,\r\n        },\r\n      });\r\n    \r\n      const data = await response.json();\r\n      return data.access_token;\r\n  } catch(error) {\r\n      console.error(\"Failed to generate Access Token:\", error);\r\n  } \r\n};\r\n\r\nconst createOrder = async () => {\r\n  const accessToken = await generateAccessToken();\r\n  const url = `${base}/v2/checkout/orders`;\r\n  const payload = {\r\n      intent: \"CAPTURE\",\r\n      purchase_units: [\r\n      {\r\n          amount: {\r\n          currency_code: \"USD\",\r\n          value: \"0.02\",\r\n          },\r\n      },\r\n      ],\r\n  };\r\n\r\n  const response = await fetch(url, {\r\n      headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${accessToken}∫`,\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify(payload),\r\n  });\r\n\r\n  return handleResponse(response);\r\n};\r\n\r\n\r\nconst capturePayment = async (orderID) => {\r\n  const accessToken = await generateAccessToken();\r\n  const url = `${base}/v2/checkout/orders/\\${orderID}/capture`;\r\n\r\n  const response = await fetch(url, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${accessToken}∫`,\r\n      }\r\n  });\r\n  \r\n  return handleResponse(response);\r\n};\r\n\r\nasync function handleResponse(response) {\r\n  if (response.status === 200 || response.status === 201) {\r\n    return response.json();\r\n  }\r\n\r\n  const errorMessage = await response.text();\r\n  throw new Error(errorMessage);\r\n}\r\n\r\n\r\napp.post(\"/orders\", async (req, res) => {\r\n  try{\r\n      const response = await createOrder();\r\n      res.json(response);\r\n  } catch(error) {\r\n      console.error(\"Failed to create order:\", error);\r\n      res.status(500).json({ error: \"Failed to create order.\" });\r\n  }\r\n});\r\n\r\napp.post(\"/orders/:orderID/capture\", async (req, res) => {\r\n  try {\r\n      const { orderID } = req.params;\r\n      const response = await capturePayment(orderID);\r\n      res.json(response);\r\n  } catch (error){\r\n      console.error(\"Failed to create order:\", error);\r\n      res.status(500).json({ error: \"Failed to capture order.\" });\r\n  }\r\n});\r\n\r\napp.listen(9597, () => {\r\n  console.log(\"listening on http://localhost:9597/\");\r\n});"],"file":"paypal.dev.js"}