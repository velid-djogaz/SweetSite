{"version":3,"sources":["paypal.js"],"names":["_express","_interopRequireDefault","require","_nodeFetch","_cors","process","env","CLIENT_ID","APP_SECRET","app","base","use","origin","generateAccessToken","auth","response","data","regeneratorRuntime","async","_context","prev","next","from","toString","awrap","body","headers","Authorization","concat","sent","json","abrupt","access_token","t0","console","error","stop","Buffer","accessToken","url","method","amount","currency_code","value","Content-Type","JSON","stringify","payload","handleResponse","capturePayment","_context3","createOrder","status","intent","text","post","req","res","_context5","orderID","_context6","params","listen"],"mappings":"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","file":"paypal.min.js","sourcesContent":["import express from \"express\";\r\nimport fetch from \"node-fetch\";\r\nimport cors from \"cors\";\r\nimport \"dotenv/config\";\r\n\r\nconst { CLIENT_ID, APP_SECRET } = process.env;\r\nconst app = express();\r\nconst base = \"https://api-m.sandbox.paypal.com\";\r\napp.use(cors({origin: '*'}));\r\n\r\nconst generateAccessToken = async () => {\r\n  try {\r\n      const auth = Buffer.from(CLIENT_ID + \":\" + APP_SECRET).toString(\"base64\");\r\n      const response = await fetch(`${base}/v1/oauth2/token`, {\r\n        method: \"post\",\r\n        body: \"grant_type=client_credentials\",\r\n        headers: {\r\n          Authorization: `Basic ${auth}`,\r\n        },\r\n      });\r\n    \r\n      const data = await response.json();\r\n      return data.access_token;\r\n  } catch(error) {\r\n      console.error(\"Failed to generate Access Token:\", error);\r\n  } \r\n};\r\n\r\nconst createOrder = async () => {\r\n  const accessToken = await generateAccessToken();\r\n  const url = `${base}/v2/checkout/orders`;\r\n  const payload = {\r\n      intent: \"CAPTURE\",\r\n      purchase_units: [\r\n      {\r\n          amount: {\r\n          currency_code: \"USD\",\r\n          value: \"0.02\",\r\n          },\r\n      },\r\n      ],\r\n  };\r\n\r\n  const response = await fetch(url, {\r\n      headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${accessToken}∫`,\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify(payload),\r\n  });\r\n\r\n  return handleResponse(response);\r\n};\r\n\r\n\r\nconst capturePayment = async (orderID) => {\r\n  const accessToken = await generateAccessToken();\r\n  const url = `${base}/v2/checkout/orders/\\${orderID}/capture`;\r\n\r\n  const response = await fetch(url, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${accessToken}∫`,\r\n      }\r\n  });\r\n  \r\n  return handleResponse(response);\r\n};\r\n\r\nasync function handleResponse(response) {\r\n  if (response.status === 200 || response.status === 201) {\r\n    return response.json();\r\n  }\r\n\r\n  const errorMessage = await response.text();\r\n  throw new Error(errorMessage);\r\n}\r\n\r\n\r\napp.post(\"/orders\", async (req, res) => {\r\n  try{\r\n      const response = await createOrder();\r\n      res.json(response);\r\n  } catch(error) {\r\n      console.error(\"Failed to create order:\", error);\r\n      res.status(500).json({ error: \"Failed to create order.\" });\r\n  }\r\n});\r\n\r\napp.post(\"/orders/:orderID/capture\", async (req, res) => {\r\n  try {\r\n      const { orderID } = req.params;\r\n      const response = await capturePayment(orderID);\r\n      res.json(response);\r\n  } catch (error){\r\n      console.error(\"Failed to create order:\", error);\r\n      res.status(500).json({ error: \"Failed to capture order.\" });\r\n  }\r\n});\r\n\r\napp.listen(9597, () => {\r\n  console.log(\"listening on http://localhost:9597/\");\r\n});"]}