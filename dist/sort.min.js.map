{"version":3,"sources":["sort.js"],"names":["document","addEventListener","sortSelect","getElementById","querySelector","sortProductsByPrice","ascending","products","from","productSection","querySelectorAll","sort","a","b","priceA","parseFloat","textContent","replace","priceB","innerHTML","product","appendChild","value","selectedOption","Array","parseInt","getAttribute","indexB","forEach","resetDefaultView"],"mappings":"aAAAA,SAASC,iBAAiB,mBAAoB,WAC1C,IAAMC,EAAaF,SAASG,eAAe,eADtCF,EAAiBD,SAAAI,cAAoB,oBAmB1C,SAASC,EAAoBC,GACnBC,IAAAA,EAAiBC,MAAKC,KAAAA,EAAeC,iBAAiB,aAC5DH,EAAAI,KAAc,SAAAC,EAAAC,GACJC,IAAMA,EAAGC,WAAaX,EAAAA,cAAF,UAA0BY,YAAoBC,QAA/C,IAAzB,KACYC,EAAGH,WAAaX,EAAAA,cAAF,UAA0BY,YAAoBC,QAA/C,IAAzB,KACA,OAAOX,EAAkBQ,EAATI,EAA2BA,EAA3CJ,IAKJP,EAAiBY,UAACC,GACdX,EAAAA,QAAeY,SAAAA,GADnBZ,EAAAY,YAAAD,KAxBJlB,EAAWD,iBAAiB,SAAU,WAAtCC,IAAWD,EAAiBC,EAAUoB,MAGX,gBAAnBC,EAAAA,GAAmB,GACQ,gBAA3BlB,EACGA,GAAkB,GACO,YAA5BA,GAyBJ,WAEAE,IAASI,EAAKa,MAAIX,KAAMJ,EAAAC,iBAAA,aACpBH,EAAYI,KAAGc,SAAAA,EAAAA,GAKnB,OAJ2BA,SAAGC,EAAAA,aAAa,wBACvBC,SAAhBd,EAAAa,aAAA,0BAMAjB,EAAeY,UAAYD,GAD/Bb,EAAAqB,QAAA,SAAAR,GAGHX,EAAAY,YAAAD,KApCOS","file":"sort.min.js","sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\r\n    const sortSelect = document.getElementById(\"sort-select\");\r\n    const productSection = document.querySelector(\".product-section\");\r\n\r\n    // Add event listener to the sorting select element\r\n    sortSelect.addEventListener(\"change\", function () {\r\n        const selectedOption = sortSelect.value;\r\n\r\n        if (selectedOption === \"low-to-high\") {\r\n            sortProductsByPrice(true); // Ascending order\r\n        } else if (selectedOption === \"high-to-low\") {\r\n            sortProductsByPrice(false); // Descending order\r\n        } else if (selectedOption === \"default\") {\r\n            // Reset to default view (original order)\r\n            resetDefaultView();\r\n        }\r\n    });\r\n\r\n    // Function to sort products by price\r\n    function sortProductsByPrice(ascending) {\r\n        const products = Array.from(productSection.querySelectorAll(\".product\"));\r\n        products.sort((a, b) => {\r\n            const priceA = parseFloat(a.querySelector(\".price\").textContent.replace(\"$\", \"\"));\r\n            const priceB = parseFloat(b.querySelector(\".price\").textContent.replace(\"$\", \"\"));\r\n            return ascending ? priceA - priceB : priceB - priceA;\r\n        });\r\n\r\n        // Clear the product section and re-append the sorted products\r\n        productSection.innerHTML = \"\";\r\n        products.forEach((product) => {\r\n            productSection.appendChild(product);\r\n        });\r\n    }\r\n\r\n    // Function to reset to default view (original order)\r\n    function resetDefaultView() {\r\n        // You should have a data attribute that stores the original order index\r\n        const products = Array.from(productSection.querySelectorAll(\".product\"));\r\n        products.sort((a, b) => {\r\n            const indexA = parseInt(a.getAttribute(\"data-original-order\"));\r\n            const indexB = parseInt(b.getAttribute(\"data-original-order\"));\r\n            return indexA - indexB;\r\n        });\r\n\r\n        // Clear the product section and re-append the products in original order\r\n        productSection.innerHTML = \"\";\r\n        products.forEach((product) => {\r\n            productSection.appendChild(product);\r\n        });\r\n    }\r\n});"]}